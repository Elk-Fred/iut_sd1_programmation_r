### Exercice 1 - Les objets et les vecteurs


###### Exercice sur les fonctions c(), rm(), print()



# c() : # Concatène des vecteurs ou des valeurs pour créer un nouveau vecteur
 # Exemple : nouveaux_vecteur<- c(vecteur1, vecteur2)



# rm() # Supprime des objets (variables ou fonctions) de l'environnement.
    # Argument : list = ls() , supprime tous les objets, 
    # exemple : rm(objet1, objet2)



# : # Description : Génère une séquence avec un pas de 1. 
  # Exemple :  sequence <- 8 : 15
  


# [-1] : # Accèder à tous les éléments sauf ceux précisés.
         # Exemple : vecteur1[-4].
  



a <- 10 # Création des objets A et B 
b <- 5

resultat <- a * b #Stockage de a et b dans resultat
print(resultat)


A <- 7.2  # création des objets A et B
B <- 10.1
class(A)
class(B)
resultat <- A + B # Stockage dans resultats

## Fonction pour supprimer les objets dans l'environnement
rm(list = ls() )
     # ou
rm(a,b,A,B,resultat)



### EXERCICE 2 - Fonctions usuelles


# seq() : # Description : une séquence de nombres, 
        # Argument : From, to, by spécifiant le début, la fin et l'incrément.
        # Exemple : sequence <- seq(1, 10, by = 2)


# rep() : # Description : Répète les éléments d'un vecteur plusieurs fois.
        # Argument : times , spécifiant le nombre de répétitions.
        # Exemple : replication <- rep(5, times = 5)


# length() : # Description : Retourne la longueur d'un vecteur.
           # Exemple : longueur <- length(vecteur).
 
   
# Class() : # Description : Retourne le type de classe d'un objet.
          # Exemple : type_classe <- class(objet).
  

  
vecteur <- c(1,2,3,4,5) # création d' un vecteur numérique de nombres de 1 à 5 et afficher sa classe. Afficher le troisième élément du vecteur.
class(vecteur)  
  
v1 <- c(1,2,3,4,5)

v2 <-  v1 + 3

v3 <- c(1,2,3,4,5,6)  

v4 <- v3 ^ 2  

V5 <- v4 / 2


#Création d'un vecteur caractère avec les jours de la semaine. 
vecteur <- c("Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche")
class(vecteur) # et afficher sa classe.
vecteur[c(2,7)] #Afficher le 2ème et 7ème éléments du vecteur.
  

# Créer un vecteur avec des valeurs booléennes et afficher sa classe.
vecteur <- c(TRUE, FALSE, TRUE, FALSE, TRUE)
class(vecteur)


# Créer un vecteur numérique contenant des nombres décimaux et afficher sa classe.
vecteur <- c(1.2, 2.5, 3.8, 4.1, 5.6)
class(vecteur)
vecteur[-3] #  Afficher tous les éléments sauf le 3ème.


# Créer un vecteur caractère avec le nom des mois et afficher sa classe. Afficher les mois du premier trimestre.
vecteur <- c("Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre")
class(vecteur)
vecteur[c(1,2,3)] #  Afficher les mois du premier trimestre.


# Créer un vecteur numérique avec des nombres négatifs et afficher sa classe. Afficher le dernier et premier éléments du vecteur.
vecteur <- c(-1, -2, -3, -4, -5)
class(vecteur)
vecteur[c(5,1)] # Afficher le dernier et premier éléments du vecteur.


# Créer un vecteur caractère contenant des noms de fruits et afficher sa classe. Afficher tous les éléments sauf les deux premiers.
vecteur <- c("Pomme", "Banane", "Orange", "Fraise", "Ananas")
class(vecteur)
vecteur[-c(1,2)] # Afficher tous les éléments sauf les deux premiers.


# Créer un vecteur numérique avec des valeurs manquantes (NA) et afficher sa classe.
vecteur <- c(1, 2, NA, 4, 5)
class(vecteur)


# Créer une séquence de nombres de 1 à 10 puis calculer la longueur du vecteur.
ma_sequence <- seq(from = 1, to = 10)
length(ma_sequence)


# Générer une séquence de nombres pairs de 2 à 20 puis calculer la longueur du vecteur.
ma_sequence <- seq(from = 2, to = 20, by = 2)
length(ma_sequence)


# Créer une séquence décroissante de 0 à -5 puis calculer la longueur du vecteur.
ma_sequence <- seq(from = 0, to = -5)
length(ma_sequence)


# Générer une séquence de nombres de 5 à 50 avec un pas de 5 puis calculer la longueur du vecteur.
ma_sequence <- seq(from = 5, to = 50, by = 5)
length(ma_sequence)


# Créer une séquence de 10 à 1 en ordre décroissant puis calculer la longueur du vecteur.
ma_sequence <- seq(from = 10, to = 1, by = -1)
length(ma_sequence)


# Générer une séquence de nombres de 0 à 1 avec un pas de 0.1 puis calculer la longueur du vecteur.
ma_sequence <- seq(from = 0, to = 1, by = 0.1)
length(ma_sequence)


# Générer une séquence de 5 à -5 avec un pas de -1 puis calculer la longueur du vecteur.
ma_sequence <- seq(from = 5, to = -5, by = -1)
length(ma_sequence)


# Générer une séquence de 1 à 10 avec seulement les nombres impairs puis calculer la longueur du vecteur.
ma_sequence <- seq(from = 1, to = 10, by = 2)
length(ma_sequence)



#### Les Fonctions c(), rep()

# Répéter le nombre 3 cinq fois et stocker le résultat dans un vecteur.
vecteur <- rep(3, times = 5)


# Créer un vecteur répétant les lettres 'A', 'B', 'C' trois fois chacune.
vecteur <- rep(c('A', 'B', 'C'), times = 3)


# Répéter la séquence de nombres de 1 à 3 trois fois et stocker le résultat dans un vecteur.
vecteur <- rep(1:3, times = 3)


# Créer un vecteur répétant les valeurs TRUE et FALSE quatre fois chacune.
vecteur <- rep(c(TRUE, FALSE), times = 4)


# Utiliser la fonction rm pour supprimer les objets des questions précédentes.
rm(list = ls())




### EXERCICE 3 - Fonctions statistique univariées et simulation.


# sum()	:# Description : Calcule la somme des éléments d'un vecteur.	
         #	Argument Pertinent : na.rm : spécifie si les valeurs NA doivent être retirées (par défaut FALSE).	
         # Exemple somme <- sum(vecteur)


# mean() :# Description : na.rm : spécifie si les valeurs NA doivent être retirées (par défaut FALSE).
          # Argument : na.rm : spécifie si les valeurs NA doivent être retirées (par défaut FALSE).	
          # Exemple : moyenne <- mean(vecteur)


# median() : # Desceiption : Calcule la médiane d'un vecteur.
             # Argument : na.rm : spécifie si les valeurs NA doivent être retirées (par défaut FALSE).
             # Exemple : mediane <- median(vecteur)


# min() : # Description : Retourne la valeur minimale d'un vecteur.
          # Argument : na.rm : spécifie si les valeurs NA doivent être retirées (par défaut FALSE).
          # Exemple : minimum <- min(vecteur)


# max() : # Description : Retourne la valeur maximale d'un vecteur.
          # Argument : na.rm : spécifie si les valeurs NA doivent être retirées (par défaut FALSE).
          # Exemple : maximum <- max(vecteur)


 # sd() : # Description : Calcule l'écart type d'un vecteur.
          # Argument : na.rm : spécifie si les valeurs NA doivent être retirées (par défaut FALSE)
          # Exemple : ecart_type <- sd(vecteur)


# var() : # Description : Calcule la variance d'un vecteur.
          # Argument : na.rm : spécifie si les valeurs NA doivent être retirées (par défaut FALSE).
          # variance <- var(vecteur)


# quantile() : # Description : Calcule les quantiles d'un vecteur.
               # Argument : x : le vecteur pour lequel calculer les quantiles. probs : les quantiles à calculer (par exemple, c(0.25, 0.5, 0.75)). na.rm : spécifie si les valeurs NA doivent être retirées (par défaut FALSE).
               # Exemple : quantiles <- quantile(vecteur, probs = c(0.25, 0.5, 0.75))


# sort() : # Description : Trie les éléments d'un vecteur ou d'une matrice.
           # Argument : x : le vecteur ou la matrice à trier. decreasing : un booléen indiquant si le tri doit être effectué par ordre décroissant (par défaut, FALSE).
           # Exemple : vecteur_tri <- sort(vecteur)


# unique() : Retourne les valeurs uniques d'un vecteur.
            # valeurs_uniques <- unique(vecteur)


# round() :  Arrondit les nombres d'un vecteur à un nombre spécifié de décimales.
           # x : le vecteur à arrondir. digits : nombre de décimales (par défaut 0).
           # arrondi <- round(3.14159, digits = 2)


# abs() :  Calcule la valeur absolue des éléments d'un vecteur.
         # valeurs_absolues <- abs(vecteur)


# table():  Construit une table de fréquences pour un vecteur ou une combinaison de vecteurs.
          # x : vecteur ou combinaison de vecteurs pour lesquels construire la table.
          # table_frequences <- table(vecteur)


# prop.table() : # Convertit les fréquences d'une table en proportions.
                # x : la table de fréquences à convertir. margin : indique les marges à utiliser lors du calcul des proportions (par défaut, NULL signifie utiliser toutes les marges).
                # proportions <- prop.table(table_frequences)


# rnorm() : # Génère des échantillons aléatoires suivant une distribution normale.
            # n : nombre d'échantillons à générer. mean : moyenne de la distribution. sd : écart-type de la distribution.
            # echantillon_norm <- rnorm(100, mean = 10, sd = 2)


# runif() : # Génère des échantillons aléatoires suivant une distribution uniforme.
            # n : nombre d'échantillons à générer. min : valeur minimale de la distribution. max : valeur maximale de la distribution.
            # echantillon_unif <- runif(50, min = 0, max = 1)


# sample() : # Sélectionne un échantillon aléatoire à partir d'un vecteur.
             # x : vecteur à partir duquel échantillonner. size : taille de l'échantillon. replace : avec ou sans remise.
             # echantillon_aleatoire <- sample(vecteur, size = 3, replace = TRUE)


# hist() : # Crée un histogramme à partir d'un vecteur de données.
           # x : le vecteur de données à utiliser. breaks : le nombre de bâtons (barres) dans l'histogramme.
           # histogramme <- hist(data_vector, breaks = 10)


# boxplot() : # Crée une boîte à moustaches à partir d'un ou plusieurs vecteurs de données.
              # x : un ou plusieurs vecteurs de données à utiliser.
              # boite_moustaches <- boxplot(data_vector1, data_vector2)



##### Les fonctions sample(), table(), prop.table() , unique(), sort()


# Simuler un lancé de dé avec la fonction sample().
sample(x = c(1,2,3,4,5,6), size = 1)


# Simuler un lancé de dé 12 fois et stocker la simulation dans un
simulation <- sample(x = c(1,2,3,4,5,6), size = 12, replace = TRUE)
print(simulation)


# Afficher les différentes valeurs qui sont apparues avec la fonction unique()
unique(simulation)


# Compter le nombre d'apparition de chaque face avec la fonction table(). Afficher le résultat par ordre décroissant d'apparition avec la fonction sort().
table(simulation)
sort(simulation, decreasing = T)


# Compter le nombre d'apparition de chaque face en pourcentage avec la fonction prop.table(). Théoriquement, nous devrions avoir 1/6 chance d'obtenir chaque face. Est-ce le cas ?
prop.table( table(simulation) )
print("Non, ce n'est pas le cas")


# Cette fois-ci, simuler un lancé de dé 100 000 fois et stocker la simulation dans un vecteur appelé simulation.
simulation <- sample(x = c(1,2,3,4,5,6), size = 100000, replace = TRUE)
print(simulation)


# Calculer la répartition du nombre d'apparition de chaque face en pourcentage. Afficher le résultat par ordre décroissant d'apparition avec la fonction sort(). La taille de cet échantillon permet-il de se rapprocher des probabilités théoriques d'obtenir chacune des faces ?
simulation <- sample(x = c(1,2,3,4,5,6), size = 100000, replace = TRUE)
frequence <- prop.table( table(simulation) )
sort(frequence, decreasing = TRUE)
print("Oui, d'après la loi des grands nombres, les probabilités d'obtenir chacune des faces se rapprochent des probabilités théoriques.")
